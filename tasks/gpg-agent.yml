---
- name: Install packages
  yum:
    name: "{{ item.name }}"
    state: present
  with_items:
    - name: openssl-devel
    - name: gcc
    - name: mod_ssl
    - name: rng-tools
    - name: open-vm-tools
    - name: rng-tools
    - name: libselinux-python
    - name: expect
    - name: libselinux-python


- name: Check temp_dir existence
  file:
    path: "{{ __temp_dir }}"
    state: directory
    mode: 0755

# - name: Copy remove_all_gpg_keys
#   copy:
#     src: "{{ role_path }}/files/remove_all_gpg_keys"
#     dest: "{{ __temp_dir }}/remove_all_gpg_keys"
#     mode: a+x

- name: "Clean all keys"
  script: "{{ role_path }}/files/remove_all_gpg_keys"
  when: gpg_regenerate_key
  register: script

- debug: msg="{{ script.stdout }}"

- debug: msg="{{ script.stderr }}"

- name: Check gpg existence
  file:
    path: ~/.gnupg
    state: directory
    mode: 0700

- name: "Get process PID"
  shell: pgrep gpg-agent
  register: gpgagentproc
  failed_when: "gpgagentproc.rc == 2 or gpgagentproc.rc == 3"

- name: Check gpg key
  stat: "path=/etc/pki/rpm-gpg/RPM-GPG-KEY-{{ rpm_repo_name }}"
  register: gpgkey

- name: Start gpg agent
  command: gpg-agent --daemon --use-standard-socket --pinentry-program /usr/bin/pinentry-curses
  when: gpgagentproc is undefined

- name: start rngd for entropy creation
  command: rngd -b -r /dev/urandom
  when: gpgkey.stat.exists == False or always_regenerate_key

- name: Templating gen-key-script
  template:
    src: "{{ role_path }}/templates/gen-key-script.j2"
    dest: "{{ __temp_dir}}/gen-key-script"
    owner: root
    group: root
    mode: 0644
  when: gpgkey.stat.exists == False or always_regenerate_key

- name: Generate gpg key
  command: "gpg --expert --batch --gen-key {{ __temp_dir }}/gen-key-script"
  when: gpgkey.stat.exists == False or always_regenerate_key

- name: Export gpg key
  shell: "gpg --export --armor {{ rpm_repo_name }} > /etc/pki/rpm-gpg/RPM-GPG-KEY-{{ rpm_repo_name }}"
  register: gpgkey.stat.exists == False or always_regenerate_key


- name: Import gpg key
  rpm_key:
    state: present
    key: "/etc/pki/rpm-gpg/RPM-GPG-KEY-{{ rpm_repo_name }}"
  when: gpgkey.stat.exists == False or always_regenerate_key


- name: Templating .rpmmacro
  template:
    src: "{{ role_path }}/templates/.rpmmacros.j2"
    dest: ~/.rpmmacros
    owner: root
    group: root
    mode: 0644
  when: gpgkey.stat.exists == False or always_regenerate_key
